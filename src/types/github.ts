import z from "zod";

export const GitHubHeader = z.enum([
  "X-GitHub-Hook-ID",
  "X-GitHub-Event",
  "X-GitHub-Delivery",
  "X-Hub-Signature",
  "X-Hub-Signature-256",
  "User-Agent",
  "X-GitHub-Hook-Installation-Target-Type",
  "X-GitHub-Hook-Installation-Target-ID",
]);

export const GitHubEventType = z.enum([
  // "branch_protection_configuration",
  // "branch_protection_rule",
  "check_run",
  // "check_suite",
  // "code_scanning_alert",
  "commit_comment",
  // "create",
  // "custom_property",
  // "custom_property_values",
  "delete",
  // "dependabot_alert",
  // "deploy_key",
  // "deployment",
  // "deployment_protection_rule",
  // "deployment_review",
  // "deployment_status",
  // "discussion",
  // "discussion_comment",
  "fork",
  // "github_app_authorization",
  // "gollum",
  // "installation",
  // "installation_repositories",
  // "installation_target",
  "issue_comment",
  "issues",
  // "label",
  // "marketplace_purchase",
  // "member",
  // "membership",
  // "merge_group",
  "meta",
  // "milestone",
  // "org_block",
  // "organization",
  // "package",
  // "page_build",
  // "personal_access_token_request",
  "ping",
  // "project_card",
  // "project",
  // "project_column",
  // "projects_v2",
  // "projects_v2_item",
  "public",
  "pull_request",
  "pull_request_review_comment",
  "pull_request_review",
  "pull_request_review_thread",
  "push",
  // "registry_package",
  "release",
  // "repository_advisory",
  "repository",
  // "repository_dispatch",
  // "repository_import",
  // "repository_ruleset",
  // "repository_vulnerability_alert",
  // "secret_scanning_alert",
  // "secret_scanning_alert_location",
  // "security_advisory",
  // "security_and_analysis",
  // "sponsorship",
  "star",
  "status",
  // "team_add",
  // "team",
  "watch",
  // "workflow_dispatch",
  // "workflow_job",
  // "workflow_run",
]);

export const GitHubUser = z.object({
  login: z.string(),
  id: z.number(),
  name: z.ostring().nullable(),
  email: z.ostring().nullable(),
  avatar_url: z.ostring(),
  gravatar_id: z.ostring().nullable(),
  url: z.ostring(),
  html_url: z.ostring(),
  followers_url: z.ostring(),
  following_url: z.ostring(),
  gists_url: z.ostring(),
  starred_url: z.ostring(),
  subscriptions_url: z.ostring(),
  organizations_url: z.ostring(),
  repos_url: z.ostring(),
  events_url: z.ostring(),
  received_events_url: z.ostring(),
  type: z.enum(["Bot", "User", "Organization"]).optional(),
  site_admin: z.boolean(),
  starred_at: z.ostring(),
})

export const GitHubRepository = z.object({
  id: z.number(),
  name: z.string(),
  full_name: z.string(),
  owner: GitHubUser,
  private: z.boolean(),
  description: z.string().nullable(),
  fork: z.boolean(),
  url: z.string(),
  homepage: z.ostring().nullable(),
  language: z.ostring().nullable(),
  forks_count: z.onumber(),
  stargazers_count: z.onumber(),
  watchers_count: z.onumber(),
  size: z.onumber(),
  default_branch: z.ostring(),
  open_issues_count: z.onumber(),
  is_template: z.oboolean(),
  topics: z.string().array().optional(),
  has_issues: z.oboolean(),
  has_projects: z.oboolean(),
  has_wiki: z.oboolean(),
  has_pages: z.oboolean(),
  has_downloads: z.oboolean(),
  has_discussions: z.oboolean(),
  archived: z.oboolean(),
  disabled: z.oboolean(),
  visibility: z.ostring(),
  pushed_at: z.ostring().nullable(),
  created_at: z.ostring().nullable(),
  updated_at: z.ostring().nullable(),
  // ...
  forks: z.onumber(),
  open_issues: z.onumber(),
  watchers: z.onumber(),
  allow_forking: z.oboolean(),
});

export const GitHubApp = z.object({
  id: z.number(),
  slug: z.ostring(),
  node_id: z.string(),
  owner: GitHubUser,
  name: z.string(),
  description: z.string().nullable(),
  external_url: z.string(),
  html_url: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  permissions: z.object({
    issues: z.ostring(),
    checks: z.ostring(),
    metadata: z.ostring(),
    contents: z.ostring(),
    deployments: z.ostring(),
  }),
  events: z.string().array(),
  installations_count: z.onumber(),
  client_id: z.ostring(),
  client_secret: z.ostring(),
  webhook_secret: z.ostring().nullable(),
  pem: z.ostring(),
});

export const GitHubBranch = z.object({
  ref: z.string(),
  sha: z.string(),
  repo: z.object({
    id: z.number(),
    url: z.string(),
    name: z.string(),
  }),
});

export const GitHubPullRequest = z.object({
  id: z.number(),
  number: z.number(),
  url: z.string(),
  head: GitHubBranch,
  base: GitHubBranch,
})

export const GitHubEventTypeToPayload = {
  check_run: z.object({
    type: z.literal("check_run"),
    pl: z.object({
      action: z.enum(["completed", "created", "requested_action", "rerequested"]),
      check_run: z.object({
        app: GitHubApp,
        check_suite: z.object({
          after: z.ostring().nullable(),
          app: GitHubApp,
          before: z.ostring().nullable(),
          conclusion: z.enum([
            "success",
            "failure",
            "neutral",
            "cancelled",
            "skipped",
            "timed_out",
            "action_required",
            "stale",
            "startup_failure",
          ]).nullable(),
          created_at: z.ostring(),
          head_branch: z.ostring(),
          head_sha: z.ostring(),
          id: z.onumber(),
          node_id: z.ostring(),
          pull_requests: GitHubPullRequest.array(),
          repository: GitHubRepository,
          status: z.enum([
            "queued",
            "in_progress",
            "completed",
            "pending",
            "waiting",
          ]).optional(),
          waiting_at: z.ostring(),
          url: z.ostring(),
        }),
        completed_at: z.string().nullable(),
        // conclusion: z.string().nullable(),
        // ...
      }),
      repository: GitHubRepository,
      requested_action: z.object({
        identifier: z.ostring(),
      }).optional(),
      sender: GitHubUser,
    })
  }),
  commit_comment: z.object({
    type: z.literal("commit_comment"),
    pl: z.object({
      action: z.literal("created"),
      comment: z.object({
        author_association: z.enum([
          "COLLABORATOR", "CONTRIBUTOR", "FIRST_TIMER", "FIRST_TIME_CONTRIBUTOR", "MANNEQUIN", "MEMBER", "NONE", "OWNER"
        ]),
        body: z.string(),
        commit_id: z.string(),
        created_at: z.string(),
        id: z.number(),
        line: z.number().nullable(),
        path: z.string().nullable(),
        position: z.number().nullable(),
        reactions: z.object({
          "+1": z.number(),
          "-1": z.number(),
          confused: z.number(),
          eyes: z.number(),
          heart: z.number(),
          hooray: z.number(),
          laugh: z.number(),
          rocket: z.number(),
          total_count: z.number(),
          url: z.string(),
        }).array(),
        user: GitHubUser,
      }),
      repository: GitHubRepository,
      sender: GitHubUser,
    })
  }),
  delete: z.object({
    type: z.literal("delete"),
    pl: z.object({
      pusher_type: z.string(),
      ref: z.string(),
      ref_type: z.enum(["tag", "branch"]),
      repository: GitHubRepository,
      sender: GitHubUser,
    })
  }),
  fork: z.object({
    type: z.literal("fork"),
    pl: z.object({
      forkee: GitHubRepository,
      repository: GitHubRepository,
      sender: GitHubUser,
    }),
  }),
  ping: z.object({
    type: z.literal("ping"),
    pl: z.object({
      hook: z.object({
        active: z.boolean(),
        app_id: z.onumber(),
        config: z.object({
          content_type: z.enum(["json", "form"]).optional(),
          insecure_ssl: z.string().or(z.number()).optional(),
          secret: z.ostring(),
          url: z.ostring(),
        }),
        created_at: z.string(),
        deliveries_url: z.ostring(),
        events: z.string().array(),
        id: z.number(),
        last_response: z.object({
          code: z.number().nullable(),
          status: z.string().nullable(),
          message: z.string().nullable(),
        }).optional(),
        name: z.literal("web"),
        ping_url: z.ostring(),
        test_url: z.ostring(),
        type: z.string(),
        updated_at: z.string(),
        url: z.ostring(),
      }).optional(),
      hook_id: z.onumber(),
      repository: GitHubRepository.optional(),
      sender: GitHubUser.optional(),
      zen: z.ostring(),
    }),
  }),
};
